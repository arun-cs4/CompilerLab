1. Study of the Parser Generator (YACC).
2. Write a program to recognize a valid arithmetic expression that uses the operators +, -, * and / using YACC.
3. Write a YACC program to evaluate an expression.
4. Write a program to implement a calculator using LEX and YACC.
5. Write a program to find FIRST and FOLLOW of any given grammar.
6. Write a recursive descent parser for the grammar
E â†’ T E0
, E0 â†’ +T E0
|, T â†’ F T0
, T0 â†’ âˆ—F T0
|, F â†’ (E)|id
7. Write a program to construct a recursive descent parser for an arithmetic expression that uses the operators
+, -, * and /.
8. Write a program to construct a shift reduce parser for a given language.
9. *Write a C program to construct an LL (1) parsing table and simulate LL(1) parsing .
10. *Construct an SLR parsing table for the grammar given below and show the parser actions on the string
id+(id).
E â†’ E + T
E â†’ T
T â†’ (E)
T â†’ id
11. *Construct a CLR (CALR) parsing table for the grammar given below and show the parser actions on the
string ccdd.
S â†’ CC
C â†’ cC
C â†’ d
12. *Write a C program to design LALR Bottom up Parser.
13. *Write a C program to implement operator precedence parsing.
14. *Draw the operator precedence table for the grammar and perform operator precedence parsing on the string
id*(id+id)/(id-id)
E â†’ E + E|E âˆ’ E|EÂ âˆ—Â E|E/E|(E)|id
